inspiration
o https://github.com/itchio/capsule
o https://github.com/jonasmr/microprofile
o https://github.com/simondlevy/hackflight

before release:
o use public domain sha1
o remove _CRT_SECURE_NO_WARNINGS
    #define snprintf _snprintf

js:
    https://github.com/gasman/bonsai-c
    http://babeljs.io/
    https://news.ycombinator.com/item?id=11844574
    https://flowtype.org/docs/getting-started.html#_
    https://www.typescriptlang.org/

demo:
o all stages of the hough transform
o show interactive mode and stream mode
o live fisheye calibration
o v4l2/ffmpeg camera input

vdb:
o error if vdb_begin is called again without vdb_end?
o mutex on latest message
o slider1i represent large integers with float
o _beginthread and _endthread instead of CreateThread
o NOMINMAX
o #undef near/far
o Make default behaviour to choose an arbitrary port (#define USE_FIXED_PORT 8000 otherwise)
o vdb_mouse.x/y and vdb_select
    Browser sends mouse coordinates (NDC)
    vdb_select(x, y) compares (x,y) in NDC with mouse
    If the element is the closest, the block is executed
    -> Conditional drawcalls!
    Obs! Does not work in paused stream mode; only in feedback mode
        -> To enforce this, maybe let vdb_loop give out mouse coordinates
        and expose them otherwise?...

web:
o precision on mbps (1e+2...)
o reduce/offscreen DOM manipulations: https://www.html5rocks.com/en/tutorials/speed/html5/
o nearest/linear/mipmap filtering
o http://codeflow.org/entries/2013/feb/22/how-to-write-portable-webgl/
o https://webglfundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html
o Focusable 3D camera
o server: offscreen canvas for text
    http://murfy.de/read/webgl-text-rendering
    https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API
    https://webglfundamentals.org/webgl/lessons/webgl-anti-patterns.html

web:
o Class specific styles
    Instead of color | width, send a 256 bit class ID.
    User can assign styles to specific IDs.
    Example: Same width, color ramps from 0 to 256, no highlight
        id width color highlight
        0  1     0     0
        1  1     1     0
        2  1     2     0
    Can have different styles for lines and points.


Ideas
o Make it easy to instrument blocks of code
    Like fisheye rectification routine; want to be able to disable VDB and have it run normally
    Don't want to duplicate code or move into seperate function
o Log raw data in application? I.e. IMU data, ...?
o server: mapping, hovering, labels and pausing
    - Problem: In stream-mode, the server cannot necessarily
    reproduce the visualization, because the data might be updated.
    Hence, if the browser has paused to inspect, and would like
    to hover over an element to see its label (and maybe do some
    conditional drawing), the server cannot reproduce the correct
    label.
    - Solution: Server _stores_ labels for each drawn element, but
    only sends the ones that are necessary. Will require tremendous
    amounts of storage though!! 100k point x 64 byte = 6 mb
        for i=1..n
            vdb_label("Votes: %d\nr: %.2f\nt: %.2f", ...)
            vdb_color1f(votes/peak);
            vdb_point(t, r);
    - And what about conditional draw calls?
        if (vdbMap(t,r)) { draw many points... } like in hough transform
        Storing the conditional draw calls for each possible outcome
        would require _way_ much memory.

    ALTERNATIVELY: At an additional burder of the programmer

    + Can do conditional drawing
    + Can pause _into_ interactive mode
        (although I suppose you could always do that, but at the risk
        of the programmer that you might change values that should not
        be changed at runtime!!)
    - Less storage requirements, unless the copied data is gigantic

    if (vdb_begin()) <- Can check if the browser has currently paused execution
    {
        if (vdb_shouldupdate()) <- true if not paused
        {
            // copy hough table into local variable
        }

        vdb_end();
    }

    ALTERNATIVELY: Limit inspection like that to interactive-mode???

o server/browser: Filter draw-calls by color!!
    Can solve the visualize-hough-support-points problem.
    Each line and its support points are labelled with the same color.
    Then, in the browser, we can filter by one color at a time.
    That won't really work if a point can support multiple lines??

o What about views? Precompute on server?
    vdb_xview(left, right) sets viewport in window
    vdb_xrange(left, right) maps [left,right] to viewport edges

    vdb_xview(-1,+1);
    vdb_yview(-1,+1);
    vdb_xrange(t_min, t_max);
    vdb_yrange(r_min, r_max);
    vdb_point(t, r);

    How does this interact with user-controlled cameras?
    And vdb_map??

o Overlay views in browser?

o browser: color linking
    In browser:
        Can link 'color' to both
        -> Indexed palette (qualitative, sequential, gray, ...)
        (see matlabcolors.jpg)
        -> Scale of geometry
        Either or both

o misc: Labels
    A string of bytes is sent along with the command buffer
    describing where (x,y) and what (%s).
        if (vdb_map(x, y))
        {
            vdb_label(x, y, "%s", ...);
        }

        -->
        if (x,y is closest to latest cursor position)
        {
            cmdbuf.label_x = x;
            cmdbuf.label_y = y;
            cmdbuf.label_s = s;
        }
    Cursor position is received from browser per frame?

o server: send list of possible views and let browser filter
o server: hton and ntoh
o server: Receive large messages (accumulate, until FIN)

o browser: user-defined interface sidebar
o browser: SVG icons (https://material.io/icons/#ic_mode_comment)

o browser: https://projects.lukehaas.me/css-loaders/

o server:
    send_thread should be able to check if the work-buffer is ready to be sent
    (cause it might not have been signalled to be sent because send_thread was
    busy, and it might take a long time before it can be signalled again).

o browser: Hide or show axes
o browser: Set canvas width height programmatically?
o browser: Pausing to inspect in stream mode
o browser: Scroll back frames in history
o browser: Equidistant projection
o browser: Pinhole projection with Brown-Conrady distortion
o browser: Dynamic line rendering (binary search, curvature)

o server: namespaces
    namespace socket
    {
        #include <winsock.h>
    }
    #pragma comment(lib, "wsock32.lib")

    int main()
    {
        socket::send();

        socket::Sleep(1000);
    }
